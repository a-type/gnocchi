/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { ListChangesPushData, capitalize } from '@aglio/tools';
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import {
	precacheAndRoute,
	createHandlerBoundToURL,
	cleanupOutdatedCaches,
} from 'workbox-precaching';
import { NavigationRoute, registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// auto-update on ready
// self.skipWaiting();
// clientsClaim();

cleanupOutdatedCaches();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

registerRoute(new NavigationRoute(createHandlerBoundToURL('/index.html')));

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
	// Add in any other file extensions or routing criteria as needed.
	({ url }) =>
		url.origin === self.location.origin && url.pathname.endsWith('.png'),
	// Customize this strategy as needed, e.g., by changing to CacheFirst.
	new StaleWhileRevalidate({
		cacheName: 'images',
		plugins: [
			// Ensure that once this runtime cache reaches a maximum size the
			// least-recently used images are removed.
			new ExpirationPlugin({ maxEntries: 50 }),
		],
	}),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
	if (event.data && event.data.type === 'SKIP_WAITING') {
		console.log('Skip waiting');
		self.skipWaiting();
	}
});

// Any other custom service worker logic can go here.

self.addEventListener('fetch', (event) => {
	const url = new URL(event.request.url);

	// detect a share event from the PWA
	if (event.request.method === 'POST' && url.pathname === '/share') {
		// redirect so the user can refresh without resending data
		event.respondWith(Response.redirect('/'));

		// wait for ready message from main thread
		event.waitUntil(
			(async function () {
				await nextMessage('share-ready');

				if (!event.resultingClientId) return Response.redirect('/', 303);
				const client = await self.clients.get(event.resultingClientId);
				if (!client) {
					console.warn('No client found');
					return Response.redirect('/', 303);
				}

				const formData = await event.request.formData();
				const text = formData.get('text');
				if (text && typeof text === 'string') {
					// check if text is a URL
					try {
						new URL(text);
						// post message to the client

						client.postMessage({ type: 'pwa-share', url: text });
					} catch (e) {
						// not a URL, could be ingredients list
						const items = text.split('\n');

						client.postMessage({ type: 'pwa-share', items });
					}
				} else {
					console.warn('No text found in share');
				}
			})(),
		);
	}
});

const nextMessageResolveMap = new Map<string, (() => void)[]>();

/**
 * Wait on a message with a particular event.data value.
 *
 * @param dataVal The event.data value.
 */
function nextMessage(dataVal: string): Promise<void> {
	return new Promise((resolve) => {
		if (!nextMessageResolveMap.has(dataVal)) {
			nextMessageResolveMap.set(dataVal, []);
		}
		nextMessageResolveMap.get(dataVal)!.push(resolve);
	});
}

self.addEventListener('message', (event) => {
	const type = event.data && event.data.type;
	if (type) {
		const resolvers = nextMessageResolveMap.get(type);
		if (!resolvers) return;
		nextMessageResolveMap.delete(type);
		for (const resolve of resolvers) resolve();
	}
});

self.addEventListener('push', (event) => {
	if (event.data) {
		const pushData = event.data.json() as ListChangesPushData;
		console.debug(`Push notification received: ${JSON.stringify(pushData)}`);
		event.waitUntil(
			(async function () {
				const isActive = await isClientFocused();

				if (isActive) {
					console.log('Skipping push notification since app is open');
					return;
				}

				const existingNotifications =
					await self.registration.getNotifications();
				let currentNotification;

				for (let i = 0; i < existingNotifications.length; i++) {
					if (
						existingNotifications[i].data &&
						existingNotifications[i].data.userName === pushData.userName
					) {
						currentNotification = existingNotifications[i];
					}
				}

				const commonOptions = {
					tag: 'list-change',
					icon: 'https://gnocchi.club/android-chrome-192x192.png',
				};

				if (!currentNotification) {
					self.registration.showNotification(
						`${pushData.userName} updated your list`,
						{
							...commonOptions,
							body: makeListChangeBody(
								pushData.addedItemCount,
								pushData.purchasedItemCount,
							),
							data: pushData,
						},
					);
				} else {
					currentNotification.close();
					const newData = {
						...pushData,
						addedItemCount:
							pushData.addedItemCount +
							(currentNotification.data.addedItemCount ?? 0),
						purchasedItemCount:
							pushData.purchasedItemCount +
							(currentNotification.data.purchasedItemCount ?? 0),
					};
					self.registration.showNotification(
						`${pushData.userName} updated your list`,
						{
							...commonOptions,
							body: makeListChangeBody(
								newData.addedItemCount,
								newData.purchasedItemCount,
							),
							data: newData,
						},
					);
				}
			})(),
		);
	}
});

function makeListChangeBody(
	addedItemCount: number,
	purchasedItemCount: number,
) {
	const addedItems =
		addedItemCount > 0
			? `added ${addedItemCount} item${addedItemCount > 1 ? 's' : ''}`
			: '';
	const purchasedItems =
		purchasedItemCount > 0
			? `purchased ${purchasedItemCount} item${
					purchasedItemCount > 1 ? 's' : ''
			  }`
			: '';
	if (addedItems && purchasedItems) {
		return capitalize(`${addedItems} and ${purchasedItems}`);
	} else if (addedItems) {
		return capitalize(addedItems);
	} else if (purchasedItems) {
		return capitalize(purchasedItems);
	} else {
		return '';
	}
}

async function isClientFocused() {
	const windowClients = await self.clients.matchAll({
		type: 'window',
		includeUncontrolled: true,
	});
	let clientIsFocused = false;
	for (let i = 0; i < windowClients.length; i++) {
		const windowClient = windowClients[i];
		if (windowClient.focused) {
			clientIsFocused = true;
			break;
		}
	}
	return clientIsFocused;
}
