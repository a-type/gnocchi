/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Mesh_chinese: THREE.Mesh
    Mesh_chinese_1: THREE.Mesh
    Mesh_chinese_2: THREE.Mesh
    Mesh_chinese_3: THREE.Mesh
    chopstick: THREE.Mesh
    chopstick_1: THREE.Mesh
  }
  materials: {
    brownLight: THREE.MeshStandardMaterial
    white: THREE.MeshStandardMaterial
    red: THREE.MeshStandardMaterial
    green: THREE.MeshStandardMaterial
    brown: THREE.MeshStandardMaterial
  }
}

export function Chinese({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/models/kenney-foods/chinese.glb') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[0, Math.PI / 2, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_chinese.geometry} material={materials.brownLight} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_chinese_1.geometry} material={materials.white} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_chinese_2.geometry} material={materials.red} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_chinese_3.geometry} material={materials.green} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.chopstick.geometry}
          material={nodes.chopstick.material}
          position={[0.08, 0.13, 0.16]}
          rotation={[0, 0.58, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.chopstick_1.geometry}
          material={nodes.chopstick_1.material}
          position={[-0.06, 0.13, 0.14]}
          rotation={[0, -0.69, 0]}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/models/kenney-foods/chinese.glb')
