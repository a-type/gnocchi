// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../.generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String            @id @default(cuid())
  fullName         String            @map("full_name")
  friendlyName     String            @map("friendly_name")
  email            String            @unique
  imageUrl         String?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  planId           String            @map("plan_id")
  password         String?
  role             String            @default("user")
  plan             Plan              @relation(fields: [planId], references: [id])
  invitations      PlanInvitation[]
  accounts         Account[]
  logs             ActivityLog[]
  publishedRecipes PublishedRecipe[]

  isProductAdmin Boolean @default(false) @map("is_product_admin")

  @@map("profiles")
}

model Account {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String   @map("provider_account_id")
  type              String
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  tokenType         String?  @map("token_type")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  profileId         String   @map("profile_id")
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Plan {
  id                     String           @id @default(cuid())
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @updatedAt @map("updated_at")
  deletedAt              DateTime?        @map("deleted_at")
  stripeCustomerId       String?          @map("stripe_customer_id")
  stripeSubscriptionId   String?          @map("stripe_subscription_id")
  subscriptionExpiresAt  DateTime?        @map("subscription_expires_at")
  subscriptionCanceledAt DateTime?        @map("subscription_canceled_at")
  subscriptionStatus     String?          @map("subscription_status")
  featureFlags           String           @default("{}") @map("feature_flags")
  members                Profile[]
  invitations            PlanInvitation[]

  @@unique([stripeSubscriptionId])
  @@map("plans")
}

model PlanInvitation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  expiresAt   DateTime  @map("expires_at")
  claimedAt   DateTime? @map("claimed_at")
  inviterName String    @map("inviter_name")
  inviterId   String    @map("inviter_id")
  inviter     Profile   @relation(fields: [inviterId], references: [id])
  planId      String    @map("plan_id")
  plan        Plan      @relation(fields: [planId], references: [id])

  @@map("plan_invitations")
}

model DefaultCategory {
  id      String @id @default(cuid())
  name    String
  sortKey String @default("a0") @map("sort_key")

  foodAssignments DefaultFoodCategoryAssignment[]

  @@map("default_categories")
}

model DefaultFoodCategoryAssignment {
  id         String          @id @default(cuid())
  categoryId String          @map("category_id")
  category   DefaultCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  foodName   String          @map("food_name")
  votes      Int             @default(1)

  @@unique([categoryId, foodName])
  @@index(foodName)
  @@map("default_food_category_assignments")
}

model EmailVerification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")
  code      String   @unique
  email     String   @unique
  name      String?

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")
  code      String   @unique
  email     String   @unique
  name      String?

  @@map("password_resets")
}

model ActivityLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profileId String?  @map("profile_id")
  profile   Profile? @relation(fields: [profileId], references: [id])
  action    String
  data      String?

  @@map("activity_logs")
}

model PublishedRecipe {
  id            String    @id @default(cuid())
  publishedAt   DateTime  @default(now()) @map("published_at")
  recipeId      String    @map("recipe_id")
  libraryId     String    @map("library_id")
  snapshot      String
  publisherId   String?   @map("publisher_id")
  unpublishedAt DateTime? @map("unpublished_at")
  slug          String    @unique

  publisher Profile? @relation(fields: [publisherId], references: [id])

  @@unique([recipeId, libraryId])
  @@map("published_recipes")
}
